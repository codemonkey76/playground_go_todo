// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (name, email, password, remember_token)
VALUES ($1, $2, $3, $4)
RETURNING id, name, email, email_verified_at, created_at, updated_at
`

type CreateUserParams struct {
	Name          string         `json:"name"`
	Email         string         `json:"email"`
	Password      string         `json:"password"`
	RememberToken sql.NullString `json:"remember_token"`
}

type CreateUserRow struct {
	ID              int32        `json:"id"`
	Name            string       `json:"name"`
	Email           string       `json:"email"`
	EmailVerifiedAt sql.NullTime `json:"email_verified_at"`
	CreatedAt       sql.NullTime `json:"created_at"`
	UpdatedAt       sql.NullTime `json:"updated_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.RememberToken,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.EmailVerifiedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :one
DELETE
FROM users
WHERE id = $1
RETURNING id, name, email, email_verified_at, created_at, updated_at
`

type DeleteUserRow struct {
	ID              int32        `json:"id"`
	Name            string       `json:"name"`
	Email           string       `json:"email"`
	EmailVerifiedAt sql.NullTime `json:"email_verified_at"`
	CreatedAt       sql.NullTime `json:"created_at"`
	UpdatedAt       sql.NullTime `json:"updated_at"`
}

func (q *Queries) DeleteUser(ctx context.Context, id int32) (DeleteUserRow, error) {
	row := q.db.QueryRowContext(ctx, deleteUser, id)
	var i DeleteUserRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.EmailVerifiedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, email_verified_at, created_at, updated_at
FROM users
WHERE email = $1
LIMIT 1
`

type GetUserByEmailRow struct {
	ID              int32        `json:"id"`
	Name            string       `json:"name"`
	Email           string       `json:"email"`
	EmailVerifiedAt sql.NullTime `json:"email_verified_at"`
	CreatedAt       sql.NullTime `json:"created_at"`
	UpdatedAt       sql.NullTime `json:"updated_at"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.EmailVerifiedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, name, email, email_verified_at, created_at, updated_at 
FROM users
WHERE id = $1
`

type GetUserByIdRow struct {
	ID              int32        `json:"id"`
	Name            string       `json:"name"`
	Email           string       `json:"email"`
	EmailVerifiedAt sql.NullTime `json:"email_verified_at"`
	CreatedAt       sql.NullTime `json:"created_at"`
	UpdatedAt       sql.NullTime `json:"updated_at"`
}

func (q *Queries) GetUserById(ctx context.Context, id int32) (GetUserByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i GetUserByIdRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.EmailVerifiedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, name, email, email_verified_at, created_at, updated_at
FROM users
WHERE (id > $1 or $1 IS NULL)
AND ($2 IS NULL OR name ILIKE $2)
AND ($3 IS NULL OR email ILIKE $3)
ORDER BY id ASC
LIMIT $4
`

type ListUsersParams struct {
	ID      int32       `json:"id"`
	Column2 interface{} `json:"column_2"`
	Column3 interface{} `json:"column_3"`
	Limit   int32       `json:"limit"`
}

type ListUsersRow struct {
	ID              int32        `json:"id"`
	Name            string       `json:"name"`
	Email           string       `json:"email"`
	EmailVerifiedAt sql.NullTime `json:"email_verified_at"`
	CreatedAt       sql.NullTime `json:"created_at"`
	UpdatedAt       sql.NullTime `json:"updated_at"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]ListUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, listUsers,
		arg.ID,
		arg.Column2,
		arg.Column3,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListUsersRow{}
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.EmailVerifiedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users 
SET name = $2, email = $3, email_verified_at = $4, password = $5, remember_token = $6, updated_at = now()
WHERE id = $1
RETURNING id, name, email, email_verified_at, created_at, updated_at
`

type UpdateUserParams struct {
	ID              int32          `json:"id"`
	Name            string         `json:"name"`
	Email           string         `json:"email"`
	EmailVerifiedAt sql.NullTime   `json:"email_verified_at"`
	Password        string         `json:"password"`
	RememberToken   sql.NullString `json:"remember_token"`
}

type UpdateUserRow struct {
	ID              int32        `json:"id"`
	Name            string       `json:"name"`
	Email           string       `json:"email"`
	EmailVerifiedAt sql.NullTime `json:"email_verified_at"`
	CreatedAt       sql.NullTime `json:"created_at"`
	UpdatedAt       sql.NullTime `json:"updated_at"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (UpdateUserRow, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.EmailVerifiedAt,
		arg.Password,
		arg.RememberToken,
	)
	var i UpdateUserRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.EmailVerifiedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
